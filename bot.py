import os
import json
import requests
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
import nest_asyncio
from flask import Flask, request
from background import keep_alive

keep_alive()
# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
CMC_API_KEY = os.getenv("CMC_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä https://yourproject.onrender.com
USERS_FILE = "users.json"

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    return []

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

def add_user(chat_id):
    users = load_users()
    if chat_id not in users:
        users.append(chat_id)
        save_users(users)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
def get_crypto_data():
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    headers = {"Accepts": "application/json", "X-CMC_PRO_API_KEY": CMC_API_KEY}
    watchlist_symbols = ["BTC", "ETH", "ADA", "PEPE", "SOL"]
    symbol_param = ",".join(watchlist_symbols)

    params = {"symbol": symbol_param, "convert": "USD"}
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        data = response.json()["data"]
        message = f"üóìÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {datetime.now().strftime('%Y-%m-%d')}:\n"
        for symbol in watchlist_symbols:
            if symbol in data:
                crypto = data[symbol]
                price = crypto["quote"]["USD"]["price"]
                message += f"{crypto['name']} ({crypto['symbol']}): ${price:.2f}\n"
        return message
    else:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {response.status_code}"

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_crypto_update(context: ContextTypes.DEFAULT_TYPE):
    message = get_crypto_data()
    users = load_users()
    for chat_id in users[:]:
        try:
            await context.bot.send_message(chat_id=chat_id, text=message)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è {chat_id}: {e}")
            if "bot was blocked by the user" in str(e) or "user is deactivated" in str(e):
                users.remove(chat_id)
                save_users(users)
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ 9:00 –∏ 19:00.")
    add_user(chat_id)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    bot_app = Application.builder().token(TG_BOT_TOKEN).build()
    bot_app.add_handler(CommandHandler("start", start))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á
    job_queue = bot_app.job_queue
    job_queue.run_daily(send_crypto_update, time(hour=9, minute=0))
    job_queue.run_daily(send_crypto_update, time(hour=19, minute=0))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await bot_app.initialize()    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    await bot_app.bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot_app.start()         # –ó–∞–ø—É—Å–∫
    await bot_app.updater.start_polling()  # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

# Flask endpoint –¥–ª—è Telegram webhook
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    bot_app.update_queue.put_nowait(data)
    return "ok", 200

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å Flask
if __name__ == "__main__":
    asyncio.run(main())
    app.run(host="0.0.0.0", port=80)
