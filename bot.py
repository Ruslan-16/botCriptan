import os
import json
import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update
from flask import Flask, request
import asyncio
from hypercorn.asyncio import serve
from hypercorn.config import Config

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
CMC_API_KEY = os.getenv("CMC_API_KEY")
WEBHOOK_URL = "https://your_server_ip_or_domain/webhook"
WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = 8444

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TG_BOT_TOKEN)
dp = Dispatcher(bot)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists("users.json"):
        with open("users.json", "r") as f:
            return json.load(f)
    return []

def save_users(users):
    with open("users.json", "w") as f:
        json.dump(users, f)

def add_user(chat_id):
    users = load_users()
    if chat_id not in users:
        users.append(chat_id)
        save_users(users)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
def get_crypto_data():
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    headers = {"Accepts": "application/json", "X-CMC_PRO_API_KEY": CMC_API_KEY}
    symbols = ["BTC", "ETH", "ADA", "PEPE", "SOL", "SUI", 'TON', 'FET', 'APT', 'AVAX', 'FLOKI', 'TWT', 'ALGO',
               'CAKE', '1INCH', 'MANA', 'FLOW', 'EGLD', 'ARB', 'DYDX', 'APEX', 'CRV', 'ATOM', 'POL', 'OP', 'SEI']
    params = {"symbol": ",".join(symbols), "convert": "USD"}
    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200:
        data = response.json()["data"]
        message = f"üóìÔ∏è üè¶ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {datetime.now().strftime('%d-%m-%Y')}:\n"
        for symbol in symbols:
            if symbol in data:
                price = data[symbol]["quote"]["USD"]["price"]
                message += f"üí∞{symbol}: üí≤{price:.5f}\n"
        return message
    else:
        return f"Error fetching data: {response.status_code}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def send_crypto_update():
    message = get_crypto_data()
    if not message:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ")
        return
    users = load_users()
    for chat_id in users:
        try:
            await bot.send_message(chat_id=chat_id, text=message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {chat_id}: {e}")
            if "bot was blocked" in str(e) or "user is deactivated" in str(e):
                users.remove(chat_id)
                save_users(users)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    chat_id = message.chat.id
    await message.reply("ü§ë –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ü–µ–Ω –Ω–∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ üï∞Ô∏è 9:00 –∏ 19:00.üëç")
    add_user(chat_id)

# Webhook –æ–±—Ä–∞–±–æ—Ç
